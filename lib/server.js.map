{"version":3,"sources":["../src/server.js"],"names":["serverHost","serverPort","stateFileName","config","spaces","StateWrapper","state","value","server","Server","host","port","routes","cors","origin","route","method","path","handler","request","keys","params","split","Object","entries","filter","key","_","some","k","reduce","prev","newState","Array","isArray","payload","$themisRemove","hasOwnProperty","success","startServer","start","console","log","e","error"],"mappings":"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","sourcesContent":["import {existsSync, mkdirSync} from \"fs\"\nimport {Server} from \"hapi\"\nimport {readFileSync, writeFileSync} from \"jsonfile\"\n\nimport {config} from \"../package.json\"\nconst {\n    serverHost = \"0.0.0.0\",\n    serverPort = 3283,\n    stateFileName = \"state.json\"\n} = config\n\nif (!existsSync(\"./state\")) {\n    mkdirSync(\"./state\")\n}\n\nif (!existsSync(`./state/${stateFileName}`)) {\n    writeFileSync(\n        `./state/${stateFileName}`,\n        {},\n        {\n            spaces: 4\n        }\n    )\n}\n\nclass StateWrapper {\n    static get state() {\n        return readFileSync(`./state/${stateFileName}`)\n    }\n    static set state(value) {\n        writeFileSync(`./state/${stateFileName}`, value, {\n            spaces: 4\n        })\n    }\n}\n\nconst server = new Server({\n    host: serverHost,\n    port: serverPort,\n    routes: {\n        cors: {\n            origin: \"ignore\"\n        }\n    }\n})\n\nserver.route({\n    method: \"GET\",\n    path: \"/{keys?}\",\n    handler: request => {\n        const state = StateWrapper.state\n        const keys = request.params.keys\n            ? request.params.keys.split(\",\")\n            : Object.keys(state)\n        return Object.entries(state)\n            .filter(([key, _]) => keys.some(k => k === key))\n            .reduce(({...prev}, [key, value]) => ({...prev, [key]: value}), {})\n    }\n})\n\nserver.route({\n    method: \"POST\",\n    path: \"/\",\n    handler: request => {\n        let newState = StateWrapper.state\n        for (const {...state} of Array.isArray(request.payload)\n            ? request.payload\n            : [request.payload]) {\n            for (const [key, value] of Object.entries(state)) {\n                if (value && value.$themisRemove) {\n                    if (newState.hasOwnProperty(key)) {\n                        delete newState[key]\n                    }\n                } else {\n                    newState[key] = value\n                }\n            }\n        }\n        StateWrapper.state = newState\n        return {\n            success: true\n        }\n    }\n})\n\nasync function startServer() {\n    try {\n        await server.start()\n        console.log(`Server started on port ${serverPort}`)\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nstartServer()\n"],"file":"server.js"}